/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface IcareAvatar {
    }
    interface IcareBanner {
        "imgAlt": string;
        "imgSrc": string;
    }
    interface IcareButton {
        "form"?: string;
        "href": string;
        /**
          * @default "Click"
         */
        "label": string;
        /**
          * @default "medium"
         */
        "size": "small" | "medium" | "large";
        /**
          * @default "_self"
         */
        "target"?: "_self" | "_blank";
        /**
          * @default "button"
         */
        "type"?: "button" | "submit" | "reset";
        /**
          * @default "primary"
         */
        "variant": "primary" | "secondary";
    }
    interface IcareCard {
        /**
          * @default false
         */
        "interactive": boolean;
        /**
          * @default "outlined"
         */
        "variant": "elevated" | "outlined";
    }
    interface IcareCaregiverMiniProfileCard {
        "bio"?: string;
        "imgAlt"?: string;
        "imgSrc": string;
        "name"?: string;
    }
    interface IcareCaregiverProfileCard {
        "cardTitle": string;
        "description": string;
        /**
          * @default []
         */
        "features": string[];
        "imageAlt": string;
        "imageSrc": string;
        "shortBio": string;
    }
    interface IcareFooter {
    }
    interface IcareHeader {
    }
    interface IcareHero {
        /**
          * Alt text for accessibility
          * @default "iCare hero image"
         */
        "imageAlt": string;
        /**
          * Background hero image source
          * @default "images/heros/hero-landing-page.jpg"
         */
        "imageSrc": string;
        /**
          * Overlay position: 'top', 'center', 'bottom'
          * @default "center"
         */
        "overlayPosition": "top" | "center" | "bottom";
    }
    interface IcareHeroNew {
        /**
          * @default "images/heros/hero-landing-page.jpg"
         */
        "imageSrc": string;
        /**
          * @default "iCare hero image"
         */
        "imgAlt": string;
    }
    interface IcareLogo {
    }
    interface IcareMessagesCard {
    }
    interface IcareModal {
        /**
          * Close when clicking the backdrop
          * @default true
         */
        "closeOnBackdrop": boolean;
        /**
          * Close when pressing Escape
          * @default true
         */
        "closeOnEsc": boolean;
        /**
          * Optional heading for accessibility (falls back to slotted header)
         */
        "heading"?: string;
        /**
          * Controls visibility of the modal (reflected to attribute for CSS)
          * @default false
         */
        "open": boolean;
    }
    interface IcarePage {
    }
    interface IcareRecommendedCaregiversCard {
    }
    interface IcareSection {
    }
    interface IcareShimmer {
        /**
          * @default "1rem"
         */
        "height": string;
        /**
          * @default "100%"
         */
        "width": string;
    }
    interface IcareTextBlock {
    }
    interface IcareWebBlock {
        "imgAlt": string;
        "imgSrc": string;
        /**
          * @default "text-left"
         */
        "layout": "text-left" | "text-right" | "text-top" | "text-bottom";
    }
    interface IcareWebMinihero {
        "href": string;
        /**
          * @default "Mini Hero Title"
         */
        "imgAlt": string;
        "imgSrc": string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
}
export interface IcareMessagesCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIcareMessagesCardElement;
}
export interface IcareModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIcareModalElement;
}
declare global {
    interface HTMLIcareAvatarElement extends Components.IcareAvatar, HTMLStencilElement {
    }
    var HTMLIcareAvatarElement: {
        prototype: HTMLIcareAvatarElement;
        new (): HTMLIcareAvatarElement;
    };
    interface HTMLIcareBannerElement extends Components.IcareBanner, HTMLStencilElement {
    }
    var HTMLIcareBannerElement: {
        prototype: HTMLIcareBannerElement;
        new (): HTMLIcareBannerElement;
    };
    interface HTMLIcareButtonElement extends Components.IcareButton, HTMLStencilElement {
    }
    var HTMLIcareButtonElement: {
        prototype: HTMLIcareButtonElement;
        new (): HTMLIcareButtonElement;
    };
    interface HTMLIcareCardElement extends Components.IcareCard, HTMLStencilElement {
    }
    var HTMLIcareCardElement: {
        prototype: HTMLIcareCardElement;
        new (): HTMLIcareCardElement;
    };
    interface HTMLIcareCaregiverMiniProfileCardElement extends Components.IcareCaregiverMiniProfileCard, HTMLStencilElement {
    }
    var HTMLIcareCaregiverMiniProfileCardElement: {
        prototype: HTMLIcareCaregiverMiniProfileCardElement;
        new (): HTMLIcareCaregiverMiniProfileCardElement;
    };
    interface HTMLIcareCaregiverProfileCardElement extends Components.IcareCaregiverProfileCard, HTMLStencilElement {
    }
    var HTMLIcareCaregiverProfileCardElement: {
        prototype: HTMLIcareCaregiverProfileCardElement;
        new (): HTMLIcareCaregiverProfileCardElement;
    };
    interface HTMLIcareFooterElement extends Components.IcareFooter, HTMLStencilElement {
    }
    var HTMLIcareFooterElement: {
        prototype: HTMLIcareFooterElement;
        new (): HTMLIcareFooterElement;
    };
    interface HTMLIcareHeaderElement extends Components.IcareHeader, HTMLStencilElement {
    }
    var HTMLIcareHeaderElement: {
        prototype: HTMLIcareHeaderElement;
        new (): HTMLIcareHeaderElement;
    };
    interface HTMLIcareHeroElement extends Components.IcareHero, HTMLStencilElement {
    }
    var HTMLIcareHeroElement: {
        prototype: HTMLIcareHeroElement;
        new (): HTMLIcareHeroElement;
    };
    interface HTMLIcareHeroNewElement extends Components.IcareHeroNew, HTMLStencilElement {
    }
    var HTMLIcareHeroNewElement: {
        prototype: HTMLIcareHeroNewElement;
        new (): HTMLIcareHeroNewElement;
    };
    interface HTMLIcareLogoElement extends Components.IcareLogo, HTMLStencilElement {
    }
    var HTMLIcareLogoElement: {
        prototype: HTMLIcareLogoElement;
        new (): HTMLIcareLogoElement;
    };
    interface HTMLIcareMessagesCardElementEventMap {
        "navigate": string;
    }
    interface HTMLIcareMessagesCardElement extends Components.IcareMessagesCard, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIcareMessagesCardElementEventMap>(type: K, listener: (this: HTMLIcareMessagesCardElement, ev: IcareMessagesCardCustomEvent<HTMLIcareMessagesCardElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIcareMessagesCardElementEventMap>(type: K, listener: (this: HTMLIcareMessagesCardElement, ev: IcareMessagesCardCustomEvent<HTMLIcareMessagesCardElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIcareMessagesCardElement: {
        prototype: HTMLIcareMessagesCardElement;
        new (): HTMLIcareMessagesCardElement;
    };
    interface HTMLIcareModalElementEventMap {
        "requestClose": void;
    }
    interface HTMLIcareModalElement extends Components.IcareModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIcareModalElementEventMap>(type: K, listener: (this: HTMLIcareModalElement, ev: IcareModalCustomEvent<HTMLIcareModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIcareModalElementEventMap>(type: K, listener: (this: HTMLIcareModalElement, ev: IcareModalCustomEvent<HTMLIcareModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIcareModalElement: {
        prototype: HTMLIcareModalElement;
        new (): HTMLIcareModalElement;
    };
    interface HTMLIcarePageElement extends Components.IcarePage, HTMLStencilElement {
    }
    var HTMLIcarePageElement: {
        prototype: HTMLIcarePageElement;
        new (): HTMLIcarePageElement;
    };
    interface HTMLIcareRecommendedCaregiversCardElement extends Components.IcareRecommendedCaregiversCard, HTMLStencilElement {
    }
    var HTMLIcareRecommendedCaregiversCardElement: {
        prototype: HTMLIcareRecommendedCaregiversCardElement;
        new (): HTMLIcareRecommendedCaregiversCardElement;
    };
    interface HTMLIcareSectionElement extends Components.IcareSection, HTMLStencilElement {
    }
    var HTMLIcareSectionElement: {
        prototype: HTMLIcareSectionElement;
        new (): HTMLIcareSectionElement;
    };
    interface HTMLIcareShimmerElement extends Components.IcareShimmer, HTMLStencilElement {
    }
    var HTMLIcareShimmerElement: {
        prototype: HTMLIcareShimmerElement;
        new (): HTMLIcareShimmerElement;
    };
    interface HTMLIcareTextBlockElement extends Components.IcareTextBlock, HTMLStencilElement {
    }
    var HTMLIcareTextBlockElement: {
        prototype: HTMLIcareTextBlockElement;
        new (): HTMLIcareTextBlockElement;
    };
    interface HTMLIcareWebBlockElement extends Components.IcareWebBlock, HTMLStencilElement {
    }
    var HTMLIcareWebBlockElement: {
        prototype: HTMLIcareWebBlockElement;
        new (): HTMLIcareWebBlockElement;
    };
    interface HTMLIcareWebMiniheroElement extends Components.IcareWebMinihero, HTMLStencilElement {
    }
    var HTMLIcareWebMiniheroElement: {
        prototype: HTMLIcareWebMiniheroElement;
        new (): HTMLIcareWebMiniheroElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLElementTagNameMap {
        "icare-avatar": HTMLIcareAvatarElement;
        "icare-banner": HTMLIcareBannerElement;
        "icare-button": HTMLIcareButtonElement;
        "icare-card": HTMLIcareCardElement;
        "icare-caregiver-mini-profile-card": HTMLIcareCaregiverMiniProfileCardElement;
        "icare-caregiver-profile-card": HTMLIcareCaregiverProfileCardElement;
        "icare-footer": HTMLIcareFooterElement;
        "icare-header": HTMLIcareHeaderElement;
        "icare-hero": HTMLIcareHeroElement;
        "icare-hero-new": HTMLIcareHeroNewElement;
        "icare-logo": HTMLIcareLogoElement;
        "icare-messages-card": HTMLIcareMessagesCardElement;
        "icare-modal": HTMLIcareModalElement;
        "icare-page": HTMLIcarePageElement;
        "icare-recommended-caregivers-card": HTMLIcareRecommendedCaregiversCardElement;
        "icare-section": HTMLIcareSectionElement;
        "icare-shimmer": HTMLIcareShimmerElement;
        "icare-text-block": HTMLIcareTextBlockElement;
        "icare-web-block": HTMLIcareWebBlockElement;
        "icare-web-minihero": HTMLIcareWebMiniheroElement;
        "my-component": HTMLMyComponentElement;
    }
}
declare namespace LocalJSX {
    interface IcareAvatar {
    }
    interface IcareBanner {
        "imgAlt"?: string;
        "imgSrc"?: string;
    }
    interface IcareButton {
        "form"?: string;
        "href"?: string;
        /**
          * @default "Click"
         */
        "label"?: string;
        /**
          * @default "medium"
         */
        "size"?: "small" | "medium" | "large";
        /**
          * @default "_self"
         */
        "target"?: "_self" | "_blank";
        /**
          * @default "button"
         */
        "type"?: "button" | "submit" | "reset";
        /**
          * @default "primary"
         */
        "variant"?: "primary" | "secondary";
    }
    interface IcareCard {
        /**
          * @default false
         */
        "interactive"?: boolean;
        /**
          * @default "outlined"
         */
        "variant"?: "elevated" | "outlined";
    }
    interface IcareCaregiverMiniProfileCard {
        "bio"?: string;
        "imgAlt"?: string;
        "imgSrc"?: string;
        "name"?: string;
    }
    interface IcareCaregiverProfileCard {
        "cardTitle"?: string;
        "description"?: string;
        /**
          * @default []
         */
        "features"?: string[];
        "imageAlt"?: string;
        "imageSrc"?: string;
        "shortBio"?: string;
    }
    interface IcareFooter {
    }
    interface IcareHeader {
    }
    interface IcareHero {
        /**
          * Alt text for accessibility
          * @default "iCare hero image"
         */
        "imageAlt"?: string;
        /**
          * Background hero image source
          * @default "images/heros/hero-landing-page.jpg"
         */
        "imageSrc"?: string;
        /**
          * Overlay position: 'top', 'center', 'bottom'
          * @default "center"
         */
        "overlayPosition"?: "top" | "center" | "bottom";
    }
    interface IcareHeroNew {
        /**
          * @default "images/heros/hero-landing-page.jpg"
         */
        "imageSrc"?: string;
        /**
          * @default "iCare hero image"
         */
        "imgAlt"?: string;
    }
    interface IcareLogo {
    }
    interface IcareMessagesCard {
        "onNavigate"?: (event: IcareMessagesCardCustomEvent<string>) => void;
    }
    interface IcareModal {
        /**
          * Close when clicking the backdrop
          * @default true
         */
        "closeOnBackdrop"?: boolean;
        /**
          * Close when pressing Escape
          * @default true
         */
        "closeOnEsc"?: boolean;
        /**
          * Optional heading for accessibility (falls back to slotted header)
         */
        "heading"?: string;
        /**
          * Emitted when the modal requests to close (backdrop, Esc, close button)
         */
        "onRequestClose"?: (event: IcareModalCustomEvent<void>) => void;
        /**
          * Controls visibility of the modal (reflected to attribute for CSS)
          * @default false
         */
        "open"?: boolean;
    }
    interface IcarePage {
    }
    interface IcareRecommendedCaregiversCard {
    }
    interface IcareSection {
    }
    interface IcareShimmer {
        /**
          * @default "1rem"
         */
        "height"?: string;
        /**
          * @default "100%"
         */
        "width"?: string;
    }
    interface IcareTextBlock {
    }
    interface IcareWebBlock {
        "imgAlt"?: string;
        "imgSrc"?: string;
        /**
          * @default "text-left"
         */
        "layout"?: "text-left" | "text-right" | "text-top" | "text-bottom";
    }
    interface IcareWebMinihero {
        "href"?: string;
        /**
          * @default "Mini Hero Title"
         */
        "imgAlt"?: string;
        "imgSrc"?: string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface IntrinsicElements {
        "icare-avatar": IcareAvatar;
        "icare-banner": IcareBanner;
        "icare-button": IcareButton;
        "icare-card": IcareCard;
        "icare-caregiver-mini-profile-card": IcareCaregiverMiniProfileCard;
        "icare-caregiver-profile-card": IcareCaregiverProfileCard;
        "icare-footer": IcareFooter;
        "icare-header": IcareHeader;
        "icare-hero": IcareHero;
        "icare-hero-new": IcareHeroNew;
        "icare-logo": IcareLogo;
        "icare-messages-card": IcareMessagesCard;
        "icare-modal": IcareModal;
        "icare-page": IcarePage;
        "icare-recommended-caregivers-card": IcareRecommendedCaregiversCard;
        "icare-section": IcareSection;
        "icare-shimmer": IcareShimmer;
        "icare-text-block": IcareTextBlock;
        "icare-web-block": IcareWebBlock;
        "icare-web-minihero": IcareWebMinihero;
        "my-component": MyComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "icare-avatar": LocalJSX.IcareAvatar & JSXBase.HTMLAttributes<HTMLIcareAvatarElement>;
            "icare-banner": LocalJSX.IcareBanner & JSXBase.HTMLAttributes<HTMLIcareBannerElement>;
            "icare-button": LocalJSX.IcareButton & JSXBase.HTMLAttributes<HTMLIcareButtonElement>;
            "icare-card": LocalJSX.IcareCard & JSXBase.HTMLAttributes<HTMLIcareCardElement>;
            "icare-caregiver-mini-profile-card": LocalJSX.IcareCaregiverMiniProfileCard & JSXBase.HTMLAttributes<HTMLIcareCaregiverMiniProfileCardElement>;
            "icare-caregiver-profile-card": LocalJSX.IcareCaregiverProfileCard & JSXBase.HTMLAttributes<HTMLIcareCaregiverProfileCardElement>;
            "icare-footer": LocalJSX.IcareFooter & JSXBase.HTMLAttributes<HTMLIcareFooterElement>;
            "icare-header": LocalJSX.IcareHeader & JSXBase.HTMLAttributes<HTMLIcareHeaderElement>;
            "icare-hero": LocalJSX.IcareHero & JSXBase.HTMLAttributes<HTMLIcareHeroElement>;
            "icare-hero-new": LocalJSX.IcareHeroNew & JSXBase.HTMLAttributes<HTMLIcareHeroNewElement>;
            "icare-logo": LocalJSX.IcareLogo & JSXBase.HTMLAttributes<HTMLIcareLogoElement>;
            "icare-messages-card": LocalJSX.IcareMessagesCard & JSXBase.HTMLAttributes<HTMLIcareMessagesCardElement>;
            "icare-modal": LocalJSX.IcareModal & JSXBase.HTMLAttributes<HTMLIcareModalElement>;
            "icare-page": LocalJSX.IcarePage & JSXBase.HTMLAttributes<HTMLIcarePageElement>;
            "icare-recommended-caregivers-card": LocalJSX.IcareRecommendedCaregiversCard & JSXBase.HTMLAttributes<HTMLIcareRecommendedCaregiversCardElement>;
            "icare-section": LocalJSX.IcareSection & JSXBase.HTMLAttributes<HTMLIcareSectionElement>;
            "icare-shimmer": LocalJSX.IcareShimmer & JSXBase.HTMLAttributes<HTMLIcareShimmerElement>;
            "icare-text-block": LocalJSX.IcareTextBlock & JSXBase.HTMLAttributes<HTMLIcareTextBlockElement>;
            "icare-web-block": LocalJSX.IcareWebBlock & JSXBase.HTMLAttributes<HTMLIcareWebBlockElement>;
            "icare-web-minihero": LocalJSX.IcareWebMinihero & JSXBase.HTMLAttributes<HTMLIcareWebMiniheroElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
        }
    }
}
